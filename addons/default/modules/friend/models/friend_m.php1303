<?php

defined('BASEPATH') or exit('No direct script access allowed') ;

/**
 *
 *
 * @author      Ankit Vishwakarma <ankitvishwakarma@sify.com>
 * @package 	PyroCMS
 * @subpackage 	Events Manager Module
 * @category 	Modules
 * @license 	Copyright
 */
class Friend_m extends MY_Model
{
    CONST AWAITING_RESPONSE = 'awaiting_response';
    CONST REQUEST_SENT = 'request_sent';
    private $_salt_length = 30;
    public function __construct()
    {
        parent::__construct() ;
        $this->_table = 'friend_list' ;
        
    }
    
    public function salt()
    {
        return substr(md5(uniqid(rand(), true)), 0, $this->_salt_length) ;
    }
    
    public function get_status_label_mapping($response)
    {
         $mapping = array(
             self::AWAITING_RESPONSE => 'Awaiting Response',
             self::REQUEST_SENT => 'Request Sent',
             );
         return array_key_exists($response, $mapping) ? $mapping[$response] : 'Invite Friend';
    }
    
    public function send_friend_request($friend_id){
        $thread = $this->salt();
        $inserted_id = parent::insert(array(
            'user_id' => $this->current_user->id,
            'friend_id' => $friend_id,
            'thread_id' => $thread,
            'status' => 'request_sent')
        );
        
        $this->_add_into_notification($friend_id, $thread);
        
         parent::insert(array(
            'user_id' => $friend_id,
            'friend_id' => $this->current_user->id,
             'thread_id' => $thread,
            'status' => 'awaiting_response'
          )
        );
        
        return $thread;
    }
    
    private function _add_into_notification($friend_id, $thread){
        $this->db->insert($this->db->dbprefix('notifications'),array(
            'user_id' => $friend_id,
            'thread_id' => $thread,
            'type' => 'friend')
        );
    }
    
    public function response($request_id, $response){
        
    }
    /**
     * Get all events, within the specified conditions
     *
     * @author Ankit Vishwakarma <ankitvishwakarma@sify.com>
     * @access public
     * @return mixed
     */
    public function get_all($conds = array(), $sort_direction = 'asc')
    {
        $this->db->select()->order_by('start_date', $sort_direction) ;
        if ( !empty($conds) )
            foreach ( $conds as $cond )
                $this->db->where($cond) ;

        $events = parent::get_all() ;
        if ( !empty($events) ) {
            // Format the dates to the site format
            foreach ( $events as $event ) {
                $event->start_time = date('H:i', strtotime($event->start_date)) ;
                $event->end_time   = date('H:i', strtotime($event->end_date)) ;
            }
            return $events ;
        } else
            return array() ;
    }

    /**
     * Get an event thanks to a parameter
     *
     * @author Ankit Vishwakarma <ankitvishwakarma@sify.com>
     * @access public
     * @return mixed
     */
    public function getBy($param, $value)
    {
        $query = $this->db->query("SELECT * FROM " . $this->db->dbprefix('events') . " WHERE `" . $param . "` = '" . $value . "'") ;
        if ( $query->num_rows() == 0 )
            return null ;
        else {
            $result            = $query->result() ;
            $event             = $result[0] ;
            $event->start_time = date('H:i', strtotime($event->start_date)) ;
            $event->end_time   = date('H:i', strtotime($event->end_date)) ;
            return $event ;
        }
    }

    /**
     * Remove an event thanks to its id
     *
     * @author Ankit Vishwakarma <ankitvishwakarma@sify.com>
     * @access public
     * @return mixed
     */
    public function delete($id)
    {
        $query = $this->db->query("DELETE FROM " . $this->db->dbprefix('events') . " WHERE id = " . $id) ;
        return $query ;
    }

    /**
     * Add an event
     *
     * @author Ankit Vishwakarma <ankitvishwakarma@sify.com>
     * @access public
     * @return mixed
     */
    public function insert($input, $skip_validation = false)
    {
        // Format the date for the database
        $DATE_FORMAT    = $this->settings->get('date_format') ;
        $start_datetime = date_create_from_format($DATE_FORMAT, $input['start_date']) ;
        $start_datetime->setTime($input['start_time_hour'], $input['start_time_minute']) ;
        if ( $input['end_date_defined'] ) {
            $end_datetime = date_create_from_format($DATE_FORMAT, $input['end_date']) ;
            $end_datetime->setTime($input['end_time_hour'], $input['end_time_minute']) ;
        } else {
            $end_datetime = clone $start_datetime ;
            $end_datetime->modify('+1 hour') ;
        }

        $id = ( int ) parent::insert(array(
                    'category_id'      => $input['category_id'],
                    'sub_category_id'  => $input['sub_category_id'],
                    'title'            => $input['title'],
                    'slug'             => $input['slug'],
                    'description'      => $input['description'],
                    'place'            => $input['place'],
                    'author'           => $input['author'],
                    'start_date'       => $start_datetime->format('Y-m-d H:i:s'),
                    'end_date'         => $end_datetime->format('Y-m-d H:i:s'),
                    'end_date_defined' => $input['end_date_defined'],
                    'enable_comments'  => $input['enable_comments'],
                    'published'        => $input['published'],
                    'cover_photo'      => $input['cover_photo']
        )) ;

        // Doing this work after for PHP < 5.3
        if ( isset($input['picture_id']) ) {
            parent::update($id, array( 'picture_id' => $input['picture_id'] )) ;

            // Generate the thumbnail
            $x1 = $input['thumbnail_x1'] ;
            $y1 = $input['thumbnail_y1'] ;
            $x2 = $input['thumbnail_x2'] ;
            $y2 = $input['thumbnail_y2'] ;
            if ( !empty($x1) && !empty($y1) && !empty($x2) && !empty($y2) ) { // If there is a new selection
                $path   = UPLOAD_PATH . 'files/' ;
                $name   = 'thumbnail_event_' . $id ;
                $raw    = $this->get_image_file($input['picture_id']) ;
                $src    = UPLOAD_PATH . 'files/' . $raw->filename ;
                $disp_w = str_replace('px', '', $input['thumbnail_disp_w']) ;
                $disp_h = str_replace('px', '', $input['thumbnail_disp_h']) ;
                imageCrop($path, $name, $src, $disp_w, $disp_h, $x1, $y1, $x2, $y2) ;
                parent::update($id, array( 'thumbnail' => $name . $raw->extension )) ;
            }
        }

        // Maps
        if ( isset($input['show_map']) )
            parent::update($id, array( 'show_map' => $input['show_map'] )) ;
        else
            parent::update($id, array( 'show_map' => false )) ;
        if ( isset($input['pos_method']) ) {
            if ( $input['pos_method'] == 0 ) // Automatic mode
                parent::update($id, array( 'pos_lat' => null, 'pos_lng' => null )) ;
            else // Latitude/longitude mode
                parent::update($id, array( 'pos_lat' => $input['pos_lat'], 'pos_lng' => $input['pos_lng'] )) ;
        }
        return $id ;
    }

    public function update($id, $input, $skip_validation = false)
    {
        // Format the date for the database
        $DATE_FORMAT    = $this->settings->get('date_format') ;
        $start_datetime = date_create_from_format($DATE_FORMAT, $input['start_date']) ;
        $start_datetime->setTime($input['start_time_hour'], $input['start_time_minute']) ;
        if ( $input['end_date_defined'] ) {
            $end_datetime = date_create_from_format($DATE_FORMAT, $input['end_date']) ;
            $end_datetime->setTime($input['end_time_hour'], $input['end_time_minute']) ;
        } else {
            $end_datetime = clone $start_datetime ;
            $end_datetime->modify('+1 hour') ;
        }

        // Update all except author
        $result = parent::update($id, array(
                    'category_id'      => $input['category_id'],
                    'sub_category_id'  => $input['sub_category_id'],
                    'title'            => $input['title'],
                    'slug'             => $input['slug'],
                    'description'      => $input['description'],
                    'place'            => $input['place'],
                    'start_date'       => $start_datetime->format('Y-m-d H:i:s'),
                    'end_date'         => $end_datetime->format('Y-m-d H:i:s'),
                    'end_date_defined' => $input['end_date_defined'],
                    'enable_comments'  => $input['enable_comments'],
                    'published'        => $input['published'],
                    'cover_photo'      => $input['cover_photo'],
        )) ;

        // Doing this work after for PHP < 5.3
        if ( isset($input['picture_id']) ) {
            $result &= parent::update($id, array( 'picture_id' => $input['picture_id'] )) ;

            // Generate the thumbnail
            $x1 = $input['thumbnail_x1'] ;
            $y1 = $input['thumbnail_y1'] ;
            $x2 = $input['thumbnail_x2'] ;
            $y2 = $input['thumbnail_y2'] ;
            if ( !empty($x1) && !empty($y1) && !empty($x2) && !empty($y2) ) { // If there is a new selection
                $path   = UPLOAD_PATH . 'files/' ;
                $name   = 'thumbnail_event_' . $id ;
                $raw    = $this->get_image_file($input['picture_id']) ;
                $src    = UPLOAD_PATH . 'files/' . $raw->filename ;
                $disp_w = str_replace('px', '', $input['thumbnail_disp_w']) ;
                $disp_h = str_replace('px', '', $input['thumbnail_disp_h']) ;
                imageCrop($path, $name, $src, $disp_w, $disp_h, $x1, $y1, $x2, $y2) ;
                $result &= parent::update($id, array( 'thumbnail' => $name . $raw->extension )) ;
            }
        }

        // Maps
        if ( isset($input['show_map']) )
            $result &= parent::update($id, array( 'show_map' => $input['show_map'] )) ;
        else
            $result &= parent::update($id, array( 'show_map' => false )) ;
        if ( isset($input['pos_method']) ) {
            if ( $input['pos_method'] == 0 ) // Automatic mode
                $result &= parent::update($id, array( 'pos_lat' => null, 'pos_lng' => null )) ;
            else // Latitude/longitude mode
                $result &= parent::update($id, array( 'pos_lat' => $input['pos_lat'], 'pos_lng' => $input['pos_lng'] )) ;
        }
        return $result ;
    }

    public function get_images_files($folder_id = null)
    {
        $images = $this->db
                ->select('files.*')
                ->where('files.type', 'i') ; // Only the images files
        if ( isset($folder_id) )
            $this->db->where('folder_id', $folder_id) ;
        return $images->get('files')->result() ;
    }

    public function get_image_file($image_id, $folder_id = null)
    {
        $image  = $this->db
                ->select('files.*')
                ->where('files.type', 'i') // Only the images files
                ->where('files.id', $image_id) ; // Only the images files
        if ( isset($folder_id) )
            $this->db->where('folder_id', $folder_id) ;
        $result = $image->get('files')->result() ;
        if ( !empty($result) )
            return $result[0] ;
        return null ;
    }

    public function get_next($limit, $published = true)
    {
        $events = $this->db
                ->select()
                ->where('(start_date >= NOW()')
                ->or_where('end_date >= NOW())')
                ->order_by('start_date', 'asc')
                ->limit($limit) ;
        if ( $published )
            $this->db->where('published', 1) ;
        return $events->get('events')->result() ;
        //echo $this->db->last_query();die();
    }

    /**
         * Get the list of all the active profiles but logged in user who have same 
         * follow or same favourite or same stars and still not friends
         * @param type $limit
         */
        public function get_friend_suggestions($limit){
            $rs = $this->query("
                        SELECT P.user_id as user_id, P.display_name as name, F.status as  status
                        FROM ".$this->db->dbprefix('profiles')." AS P 
                        LEFT JOIN ".$this->db->dbprefix('friend_list')." AS F ON P.user_id = F.friend_id
                        WHERE P.user_id IN(
                                            SELECT t.user_id
                                            FROM ".$this->db->dbprefix('trends')." AS t
                                            LEFT JOIN ".$this->db->dbprefix('friend_list')." AS fl ON t.user_id = fl.user_id
                                            AND fl.user_id !='".$this->current_user->id."'
                                            WHERE entry_id
                                            IN (
                                                SELECT entry_id
                                                FROM ".$this->db->dbprefix('trends')." AS def2
                                                WHERE def2.user_id ='".$this->current_user->id."'
                                                GROUP BY entry_id
                                            )
                                            AND t.user_id !='".$this->current_user->id."'
                                            AND (fl.user_id IS NULL OR fl.status !='friend')
                                            
                                            GROUP BY t.user_id
                                        )
                        LIMIT {$limit}"
                        );
//          / echo $this->last_query(); exit; 
            $return = $rs->result();
            shuffle($return);
            return $return;
        }
}
